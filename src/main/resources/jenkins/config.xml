<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.19">
    <description/>
    <keepDependencies>false</keepDependencies>
    <properties>
        <hudson.model.ParametersDefinitionProperty>
            <parameterDefinitions>
                <hudson.model.TextParameterDefinition>
                    <name>GIT_URL</name>
                    <description/>
                    <defaultValue/>
                    <trim>false</trim>
                </hudson.model.TextParameterDefinition>
                <hudson.model.TextParameterDefinition>
                    <name>COMMIT_HASH</name>
                    <description/>
                    <defaultValue/>
                    <trim>false</trim>
                </hudson.model.TextParameterDefinition>
                <hudson.model.TextParameterDefinition>
                    <name>DOCKER_IMAGE</name>
                    <description/>
                    <defaultValue/>
                    <trim>false</trim>
                </hudson.model.TextParameterDefinition>
                <hudson.model.TextParameterDefinition>
                    <name>EXECUTE_SHELL</name>
                    <description/>
                    <defaultValue/>
                    <trim>false</trim>
                </hudson.model.TextParameterDefinition>
            </parameterDefinitions>
        </hudson.model.ParametersDefinitionProperty>
    </properties>
    <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.48">
        <script>
pipeline {
    agent any
    stages {
        stage(&apos;Clean&apos;) {
            steps {
                sh &apos;rm -rf ${WORKSPACE}/*&apos;
            }
        }
        stage(&apos;Pull&apos;) {
            steps {
                git credentialsId: &quot;AES&quot;, url: &quot;${GIT_URL}&quot;
            }
        }
        stage(&apos;Reset&apos;) {
            steps {
                sh &quot;git reset --hard ${COMMIT_HASH}&quot;
            }
        }
        stage(&apos;Run&apos;) {
            agent {
                docker {
                    image &quot;${DOCKER_IMAGE}&quot;
                    args &apos;--network none -h localhost&apos;
                    reuseNode true
                }
            }
            steps {
                catchError {
                    timeout(1) {
                        sh &quot;${EXECUTE_SHELL}&quot;
                    }
                }
            }
        }
    }
    post {
        always {
            junit allowEmptyResults: true, testResults: &apos;test-reports/*/*.xml&apos;
            cobertura autoUpdateHealth: false, autoUpdateStability: false, coberturaReportFile: &apos;coverage-reports/*/*.xml&apos;, conditionalCoverageTargets: &apos;70, 0, 0&apos;, failNoReports: false, failUnhealthy: false, failUnstable: false, lineCoverageTargets: &apos;80, 0, 0&apos;, maxNumberOfBuilds: 0, methodCoverageTargets: &apos;80, 0, 0&apos;, onlyStable: false, sourceEncoding: &apos;ASCII&apos;, zoomCoverageChart: false
            sh &apos;curl -X POST &quot;${AES_HOST}/internal/notify/callback/${JOB_NAME}/${BUILD_NUMBER}?secret=${AES_SECRET}&quot;&apos;
        }
    }
}
        </script>
        <sandbox>true</sandbox>
    </definition>
    <triggers/>
    <disabled>false</disabled>
</flow-definition>