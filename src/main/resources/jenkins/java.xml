<?xml version='1.0' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.17">
    <actions>
        <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.2.7"/>
        <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.2.7">
            <jobProperties/>
            <triggers/>
            <parameters/>
        </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
    </actions>
    <description></description>
    <keepDependencies>false</keepDependencies>
    <properties>
        <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
            <triggers>
                <com.dabsquared.gitlabjenkins.GitLabPushTrigger plugin="gitlab-plugin@1.5.3">
                    <spec></spec>
                    <triggerOnPush>true</triggerOnPush>
                    <triggerOnMergeRequest>false</triggerOnMergeRequest>
                    <triggerOnPipelineEvent>false</triggerOnPipelineEvent>
                    <triggerOnAcceptedMergeRequest>false</triggerOnAcceptedMergeRequest>
                    <triggerOnClosedMergeRequest>false</triggerOnClosedMergeRequest>
                    <triggerOnApprovedMergeRequest>false</triggerOnApprovedMergeRequest>
                    <triggerOpenMergeRequestOnPush>never</triggerOpenMergeRequestOnPush>
                    <triggerOnNoteRequest>false</triggerOnNoteRequest>
                    <noteRegex>Jenkins please retry a build</noteRegex>
                    <ciSkip>true</ciSkip>
                    <skipWorkInProgressMergeRequest>true</skipWorkInProgressMergeRequest>
                    <setBuildDescription>true</setBuildDescription>
                    <branchFilterType>All</branchFilterType>
                    <includeBranchesSpec></includeBranchesSpec>
                    <excludeBranchesSpec></excludeBranchesSpec>
                    <targetBranchRegex></targetBranchRegex>
                    <secretToken></secretToken>
                </com.dabsquared.gitlabjenkins.GitLabPushTrigger>
            </triggers>
        </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
        <com.dabsquared.gitlabjenkins.connection.GitLabConnectionProperty plugin="gitlab-plugin@1.5.3">
            <gitLabConnection></gitLabConnection>
        </com.dabsquared.gitlabjenkins.connection.GitLabConnectionProperty>
    </properties>
    <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.45">
        <script>pipeline {
    agent any
    stages {
        stage(&apos;Clean&apos;) {
            steps {
                sh &apos;rm -rf ${WORKSPACE}/*&apos;
            }
        }
        stage(&apos;Pull&apos;) {
            steps {
                git credentialsId: &apos;{%CREDENTIAL%}&apos;, url: &apos;{%GIT_HOST%}/{%NAMESPACE%}/{%PROJECT%}&apos;
            }
        }
        stage(&apos;Prepare&apos;) {
            steps {
                sh &apos;&apos;&apos;if [ ! -d &quot;/tmp/aes/{%PROBLEM%}&quot; ]; then
                wget -P /tmp/aes {%STORAGE_HOST%}/{%PROBLEM%}.zip
                unzip /tmp/aes/{%PROBLEM%}.zip -d /tmp/aes/{%PROBLEM%}
                fi
                if [ -d &quot;/tmp/aes/{%PROBLEM%}/src/test&quot; ]; then
                if [ -d &quot;${WORKSPACE}/src/test&quot; ]; then
                rm -rf ${WORKSPACE}/src/test
                fi
                cp -r /tmp/aes/{%PROBLEM%}/src/test ${WORKSPACE}/src/test
                fi
                if [ -f &quot;/tmp/aes/{%PROBLEM%}/pom.xml&quot; ]; then
                if [ -f &quot;${WORKSPACE}/pom.xml&quot; ]; then
                rm -rf ${WORKSPACE}/pom.xml
                fi
                cp /tmp/aes/{%PROBLEM%}/pom.xml ${WORKSPACE}/pom.xml
                fi&apos;&apos;&apos;
            }
        }
        stage(&apos;Test&apos;) {
            {%TEACHER_MASK%}agent {
            {%TEACHER_MASK%}    docker {
            {%TEACHER_MASK%}        image &apos;moekr/java8-maven3:1.0.0&apos;
            {%TEACHER_MASK%}        args &apos;--network none -v $HOME/.m2/:$HOME/.m2/:ro,z&apos;
            {%TEACHER_MASK%}        reuseNode true
            {%TEACHER_MASK%}    }
            {%TEACHER_MASK%}}
            steps {
                catchError {
                    timeout(3) {
                        sh &quot;mvn clean test -Dmaven.repo.local=${JENKINS_HOME}/.m2/repository/&quot;
                    }
                }
            }
        }
    }
    post {
        always {
            junit allowEmptyResults: true, testResults: &apos;target/surefire-reports/*.xml&apos;
            sh &apos;curl -l -H &quot;Content-type: application/x-www-form-urlencoded&quot; -X POST -d &quot;buildNumber=${BUILD_NUMBER}&amp;secret={%SECRET%}&quot; {%LOCAL_HOST%}/callback/{%ID%}&apos;
        }
    }
}   </script>
        <sandbox>true</sandbox>
    </definition>
    <triggers/>
    <disabled>false</disabled>
</flow-definition>